% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ga.operator.R
\name{ga.operator}
\alias{ga.operator}
\title{Genetic Algorithm for Model Structure Optimization}
\usage{
ga.operator(
  dat,
  param_table = NULL,
  search.space = "ivbase",
  no.cores = rxode2::getRxThreads(),
  foldername = "test",
  filename = "test",
  ga.control = gaControl(),
  penalty.control = penaltyControl(),
  precomputed_results_file = NULL,
  seed.no = 1234,
  ...
)
}
\arguments{
\item{dat}{A data frame containing the observed PK data, with columns
required by \pkg{nlmixr2} / \pkg{rxode2} (\code{ID}, \code{TIME},
\code{DV}, dosing records with \code{EVID}, etc.).}

\item{param_table}{Optional data frame of initial parameter estimates.
If \code{NULL}, the table will be auto-generated by
\code{\link{auto_param_table}()}.}

\item{search.space}{Character string specifying the model search space:
\itemize{
\item \code{"ivbase"} — intravenous base model
\item \code{"oralbase"} — oral base model
}}

\item{no.cores}{Integer. Number of CPU cores to use for fitting
(passed to \code{rxControl(cores = ...)}).}

\item{foldername}{Character string for output folder name.}

\item{filename}{Character string for results file prefix. The run history is
saved to \code{<filename>.csv}.}

\item{ga.control}{A list created by \code{\link{gaControl}()} specifying
GA hyperparameters: \code{npopsize}, \code{max.iter}, \code{prob.crossover},
\code{prob.mutation}, \code{sig.diff}, \code{nlocal.search}.}

\item{penalty.control}{A list created by \code{\link{penaltyControl}()}
defining penalty values for poor model diagnostics (boundary hits,
large shrinkage, high RSE, etc.).}

\item{precomputed_results_file}{Optional path to a CSV of previously computed
model results for caching and avoiding redundant runs.}

\item{seed.no}{Integer random seed for reproducibility of GA operations
(initialization, crossover, mutation, and local search).}

\item{...}{Additional arguments passed to \code{mod.run()}.}
}
\value{
An object of class \code{"gaOperatorResult"}, which is a list
containing:
\itemize{
\item \code{$Final Selected Code} — Binary vector for the best model.
\item \code{$Final Selected Model Name} — Human-readable model identifier.
\item \code{$Model Run History} — Data frame of all fitted models and fitness values.
\item \code{$Selection History} — List of population, fitness, and offspring
data for each generation.
}
}
\description{
Executes a genetic algorithm (GA) to search for the optimal pharmacokinetic
(PK) model structure within a defined \code{search.space} using
\pkg{nlmixr2} fitting and user-defined penalties. The algorithm iteratively
evolves a population of candidate model encodings through selection,
crossover, mutation, and optional local search to improve model fitness.
}
\details{
The genetic algorithm performs the following steps per generation:
\enumerate{
\item \strong{Population Initialization} — Create a random binary matrix
representing candidate models.
\item \strong{Validation} — Convert binary encodings to valid model codes
using \code{\link{validateModels}()}.
\item \strong{Fitness Evaluation} — Run each model with \code{\link{mod.run}()}
and apply penalties.
\item \strong{Selection} — Tournament selection of parents.
\item \strong{Crossover} — Swap segments of parent chromosomes to create children.
\item \strong{Mutation} — Flip bits at positions with probability
\code{prob.mutation}.
\item \strong{Local Search} — Every \code{nlocal.search} iterations, perform
exhaustive neighbor search around the current best model.
\item \strong{Elitism} — Carry the best individual forward to the next generation.
}

The algorithm continues for \code{max.iter} generations or until manually
stopped. Fitness values are stored in a global \code{Store.all} and written
to disk if \code{filename} is provided.
}
\examples{
\dontrun{
dat <- pheno_sd
result <- ga.operator(
  dat = dat,
  search.space = "ivbase",
  ga.control = gaControl(max.iter = 5, npopsize = 10),
  penalty.control = penaltyControl(),
  filename = "pheno_sd_test",
  seed.no = 1234,
  saem.control=saemControl(nBurn = 10,nEm = 10)
)
print(result)
}

}
\seealso{
\code{\link{mod.run}}, \code{\link{gaControl}}, \code{\link{penaltyControl}},
\code{\link{validateModels}}, \code{\link{ga.sel.tournament}},
\code{\link{ga.crossover}}, \code{\link{ga.mutation}}, \code{\link{runlocal}}
}
