% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabu.cores.R
\name{generate_neighbors_df}
\alias{generate_neighbors_df}
\title{Generate neighbor models}
\usage{
generate_neighbors_df(
  current_string,
  search.space = c("ivbase", "oralbase"),
  candidate.size = NULL,
  seed = NULL
)
}
\arguments{
\item{current_string}{A named numeric vector representing the current
model code. Names correspond to model features (e.g. \code{no.cmpt},
\code{eta.vc}, \code{rv}), and values to their current states.}

\item{search.space}{Character scalar: either \code{"ivbase"} or
\code{"oralbase"}. Determines which model features are available.}

\item{candidate.size}{Integer (optional). Maximum number of neighbors
to return. If \code{NULL} (default), the full neighborhood is returned.
If specified, a random subset of this size is sampled.}

\item{seed}{Optional random seed for reproducibility when sampling neighbors.}
}
\value{
A \code{list} with two components:
\describe{
\item{\code{original}}{A \code{data.frame} of neighbors as generated
by single-variable flips, before validation.}
\item{\code{validated}}{A \code{data.frame} of neighbors after
applying \code{validateModels()}, representing valid pharmacometric
models.}
}
}
\description{
Generates a set of neighbor models from a given current model code.
The neighborhood is defined as all single-variable changes
(1-bit or 1-step modifications). Each generated neighbor is passed
through \code{validateModels()} to ensure the resulting code
corresponds to a valid pharmacometric model.
}
\details{
For each neighbor, both the \emph{original} (pre-validation) and the
\emph{validated} (post-validation) codes are retained. This allows
downstream functions (e.g. \code{detect_move()}) to distinguish
between the intended primary modification and any secondary
adjustments introduced by validation.

Optionally, the function can restrict the number of neighbors
by random sampling (candidate list strategy).
}
\examples{
current_string <- c(no.cmpt = 2, eta.km = 0, eta.vc = 1,
                    eta.vp = 0, eta.vp2 = 0, eta.q = 1,
                    eta.q2 = 0, mm = 0, mcorr = 1, rv = 2)
neighbors <- generate_neighbors_df(current_string, search.space = "ivbase")
head(neighbors$original)   # raw neighbors (pre-validation)
head(neighbors$validated)  # validated neighbors (post-validation)

}
