% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod.run.R
\name{mod.run}
\alias{mod.run}
\title{Run and evaluate a population PK model}
\usage{
mod.run(
  r = 1,
  string = NULL,
  dat = NULL,
  search.space = "ivbase",
  penalty.control = penaltyControl(),
  param_table = NULL,
  nlmixr2autoinits = TRUE,
  reuse_cache = 1,
  precomputed_results_file = NULL,
  filename = NULL,
  ...
)
}
\arguments{
\item{string}{Numeric/integer vector encoding the model structure. For
\code{search.space = "ivbase"} it is expected to contain indicators in the
order used by \code{ppkmodGen()} (e.g., \code{no.cmpt}, \code{eta.km},
\code{eta.cl}, \code{eta.vc}, \code{eta.vp}, \code{eta.vp2}, \code{eta.q},
\code{eta.q2}, \code{mm}, \code{mcorr}, \code{rv}). For
\code{"oralbase"} an additional \code{eta.ka} element is expected. See Details.}

\item{dat}{Data frame of observations (columns as required by \pkg{nlmixr2}/\pkg{rxode2},
e.g., \code{ID}, \code{TIME}, \code{DV}, dosing records with \code{EVID}, etc.).}

\item{search.space}{Character, either \code{"ivbase"} (intravenous) or
\code{"oralbase"} (oral). Determines route and which indices in \code{string}
are parsed into the model.}

\item{penalty.control}{List created by \code{\link{penaltyControl}()} defining
penalties for boundary hits, large RSE, high shrinkage, convergence flags, etc.}

\item{param_table}{Data frame of initial estimates. If \code{NULL}, it is
generated by \code{\link{auto_param_table}()} (optionally using
\code{nlmixr2autoinits} helpers).}

\item{nlmixr2autoinits}{Logical. Whether to auto-initialize parameters via
\pkg{nlmixr2} helpers when building \code{param_table}.}

\item{reuse_cache}{Integer/logical. If \code{TRUE}/\code{1}, attempt to load
precomputed results (see \code{precomputed_results_file}/\code{filename}).}

\item{precomputed_results_file}{Character or \code{NULL}. Path to a CSV of
previously computed results to be searched for cache hits.}

\item{filename}{Character or \code{NULL}. Basename (without \code{.csv}) to
which the running history \emph{will be appended}. If \code{NULL}, results
are kept in memory only.}

\item{...}{Additional controls passed through, notably
\code{saem.control = nlmixr2::saemControl(...)} and
\code{table.control = nlmixr2::tableControl(...)}.}

\item{modi}{Integer. Model identifier (also used to name generated code files).}
}
\value{
Numeric scalar: the penalized fitness for the evaluated model.
}
\description{
Generates the model, fits it with \pkg{nlmixr2} (SAEM), computes a penalized
fitness, and appends results to a persistent \code{.csv} to avoid redundant runs.
}
\details{
The function constructs a structural model from \code{string} via
\code{\link{ppkmodGen}()}, \code{source()}s the generated code (defining \code{f}),
and fits by SAEM (\code{\link[nlmixr2]{saem}}) to produce a likelihood-based fit.
Fitness is then adjusted by penalties (e.g., excessive relative standard errors,
large \emph{EBE} shrinkage, boundary hits, convergence flags). For MM
(Michaelis–Menten) elimination, \code{mm = 1} toggles \code{eta.vmax}/\code{eta.cl}
inclusion as mutually exclusive components.

The function maintains an in-memory history (\code{Store.all}) and, when
\code{filename} is provided, also appends to \code{<filename>.csv}. If a model
with identical structural “key” is found in cache, the stored fitness is
returned without re-fitting.
}
\section{Side effects}{

Writes/updates \code{<filename>.csv} when \code{filename} is non-empty; also
modifies global objects such as \code{Store.all} and a cache of precomputed
results when enabled.
}

\examples{
\dontrun{
dat <- pheno_sd
# Example IV base structure (10 elements; mm at position 9 in this layout):
string <- c(1, 0, 0, 0, 0, 0, 0, 0, 0, 1)
param_table <- auto_param_table(dat = dat, nlmixr2autoinits = TRUE)
fit_val <- mod.run(
  modi = 1,
  string = string,
  dat = dat,
  search.space = "ivbase",
  param_table = param_table,
  filename = "sim_results",
  saem.control = nlmixr2::saemControl(logLik = TRUE)
)
}

}
\seealso{
\code{\link{ppkmodGen}}, \code{\link{penaltyControl}},
\code{\link{auto_param_table}},
\code{\link[nlmixr2]{saemControl}},
\code{\link[nlmixr2]{tableControl}},
\code{\link[rxode2]{rxSolve}}
}
